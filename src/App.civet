from solid-js import { createEffect, createSignal, For, Show, batch }
from solid-js/store import { createStore }
from solid-dnd-directive import { dndzone }
from katex import { renderToString }

selfDescription := '''
  Results from “Hardness Table Layout Hardness Table”
  by MIT Hardness Group, Josh Brunner, Andy Tockman, Frederick Stock, Della Hendrickson, Hayashi Layers, Timothy Gomez, Erik D. Demaine, Jenny Diomidova (2025)
'''
examples :=
  . filename: 'asp-cgs.tsv'
    title: 'Constraint Graph Satisfaction Counting'
    description: '''
      Results from
      “<a href="https://erikdemaine.org/papers/SharpSAT_ISAAC2024/">Easier Ways to Prove Counting Hard: A Dichotomy for Generalized #SAT, Applied to Constraint Graphs</a>”
      by MIT Hardness Group, Josh Brunner, Erik D. Demaine, Jenny Diomidova, Timothy Gomez, Markus Hecher, Frederick Stock, and Zixiang Zhou (2024)
    '''
  . filename: 'kplumber.tsv'
    title: 'KPlumber'
    description: '''
      Results from
      “<a href="https://doi.org/10.1016/j.tcs.2002.12.002">It is tough to be a plumber</a>”
      by Daniel Král’, Vladan Majerech, Jiřı́ Sgall, Tomáš Tichý, and Gerhard Woeginger (2004)
    '''
  . filename: 'simplefolding.tsv'
    title: 'Simple Folding'
    description: '''
      Results from
      “<a href="https://erikdemaine.org/papers/MixedSimpleFolds_TJM/">Complexity of Simple Folding of Mixed Orthogonal Crease Patterns</a>”
      by Hugo Akitaya, Josh Brunner, Erik D. Demaine, Della Hendrickson, Victor Luo, and Andy Tockman (2023)
    '''
  //. filename: 'tablelayout.tsv'
  //  title: 'Hardness Table Layout Hardness Table'
  . filename: 'tablelayout/completion.tsv'
    title: 'Hardness Table Layout Hardness Table: Completion'
    description: selfDescription
  . filename: 'tablelayout/readability.tsv'
    title: 'Hardness Table Layout Hardness Table: Readability'
    description: selfDescription
  . filename: 'tablelayout/optimization.tsv'
    title: 'Hardness Table Layout Hardness Table: Optimization'
    description: selfDescription
  . filename: 'tcells.tsv'
    title: 'T Cells'
    description: '''
      Results from
      “<a href="https://erikdemaine.org/papers/GridGraphs_FUN2024/">ASP-Completeness of Hamiltonicity in Grid Graphs, with Applications to Loop Puzzles</a>”
      by MIT Hardness Group, Josh Brunner, Lily Chung, Erik D. Demaine, Della Hendrickson, and Andy Tockman (2024)
    '''
  . filename: 'test.tsv'
    title: 'Test'
  //. filename: 'tetrotile.tsv'
  //  title: 'Tetromino Tiling'
defaultExample := 'kplumber.tsv'

type DimVal = { value: string, bg: string }
type Entry = Record<string, number | string> & {
  '!val': string
  '!bg': string
}
type Parsed = {
  dimvals: Record string, DimVal[]
  dims: Record string, number
  hdims: string[]
  vdims: string[]
  entries: Entry[]
}
type Rect = {
  hs: number
  he: number
  vs: number
  ve: number
  bg: string
  value: string
}
type Item = {
  id: number
  title: string
}

function parse(text: string): Parsed
  // format:
  /*
  param 1	value 1	cell color	value 2	cell color etc.
  param 2	value 1	etc.
  etc.	etc.	etc.

  horizontal	dimensions	in	precedence	order
  vertical	dimensions	in	precedence	order
  entry 1	cell color	param 1	0 (param 1 value)	param 2	etc.
  entry 2	cell color	param 2	etc.
  */
  // (each cell) is for things like background color that need to be repeated across multirows
  // a cell goes with its earliest result in the list
  // e.g. you might want the last line to be 'open	' with no parameters to cover everything else
  // a line that starts with % is a comment
  lines := text.split /\r\n?|\n/g
  .filter not .startsWith '%'
  line .= -1

  // Parameters and their values
  dimvals: Record<string, DimVal[]> := {}
  while lines[++line].trim()
    [d, ...vs] := lines[line].split '\t'
    dimvals[d] = []
    for i of [0...vs#] by 2
      dimvals[d].push
        value: vs[i]
        bg: vs[i+1]
  dims: Record<string, number> := {}
    for d, v in dimvals
      [d]: v#

  // Default assignment
  hdims := lines[++line].split '\t'
  vdims := lines[++line].split '\t'

  entries: Entry[] := []
  while lines[++line]
    [val, bg, ...ds] := lines[line].split '\t'
    entries.push {}
      for i of [0...ds#] by 2
        [ds[i]]: Number ds[i+1]
      '!val': val
      '!bg': bg

  {dimvals, dims, hdims, vdims, entries}

// count of values for these dimensions
function combos(dims: Record<string, number>, ds: string[])
  for product d of ds
    dims[d]

function makeGrid({dims, hdims, vdims, entries}: Parsed): Entry[][]
  // translate between overall index and dictionary of each index
  function fold(xdims: string[], idx: number): Record<string, number>
    if xdims#
      {}
        ...fold(xdims[...-1], idx %/ dims[xdims.-1])
        [xdims.-1]: idx %% dims[xdims.-1]
    else
      {}
  function unfold(xdims: string[], vs: Record<string, number>): number
    if xdims#
      unfold(xdims[...-1], vs) * dims[xdims.-1] + vs[xdims.-1]
    else
      0
  // the first entry that matches this position
  function findentry(row: number, col: number)
    for first e of entries
      dim := {...fold(vdims, row), ...fold(hdims, col)}
      continue unless for every d in e when not d.startsWith '!'
        e[d] is dim[d]
      e

  for row of [0...combos dims, vdims]
    for col of [0...combos dims, hdims]
      findentry row, col

function rectangulate(grid: Entry??[][]): Rect[]
  height := grid#
  width := grid.0.#
  ans: Rect[] := []
  for vs of [0...height]
    for hs of [0...width]
      continue unless e := grid[vs][hs]
      val := e['!val']
      // greedily find biggest rectangle, horizontal first
      he .= hs
      ve .= vs
      he++ while he < width and grid[vs][he]?['!val'] is val
      ve++ while ve < height and
        for every cell of grid[ve][hs...he]
          cell?['!val'] is val
      ans.push {hs, he, vs, ve, value: val, bg: e['!bg']}
      for v of [vs...ve]
        for h of [hs...he]
          grid[v][h] = null
  ans

function makeRows(data: Parsed): Rect[][]
  {dims, dimvals, hdims, vdims} := data
  grid := makeGrid data
  rects := rectangulate grid

  hoff := vdims#
  voff := hdims#
  rows: Rect[][] := []
  // top headers
  for d, i of data.hdims
    rows[i] = []
    for h of [0...hoff]
      rows[i].push {vs: i, ve: i+1, hs: h, he: h+1, value: '', bg: ''}
    for copy of [0...combos dims, hdims[...i]]
      for v, j of dimvals[d]
        wth := combos dims, hdims[i+1..]
        col := hoff + copy * combos(dims, hdims[i..]) + j * wth
        rows[i].push
          vs: i+1
          ve: i+2
          hs: col
          he: col + wth
          value: v.value
          bg: v.bg
  // side headers
  for d, i of data.vdims
    for copy of [0...combos dims, vdims[...i]]
      for v, j of dimvals[d]
        hgt := combos dims, vdims[i+1..]
        row := voff + copy * combos(dims, vdims[i..]) + j * hgt
        (rows[row] ?= []).push
          vs: row
          ve: row + hgt
          hs: i+1
          he: i+2
          value: v.value
          bg: v.bg
  // body
  for rect of rects
    (rows[rect.vs + voff] ?= []).push rect
  rows

export function App()
  [example, setExample] := createSignal<string?> defaultExample
  [data, setData] := createStore<Parsed | {}>()
  [rows, setRows] := createSignal<Rect[][]> []
  [hDims, setHDims] := createSignal<Item[]> []
  [vDims, setVDims] := createSignal<Item[]> []
  [hItems, setHItems] := createSignal<Item[]> []
  [vItems, setVItems] := createSignal<Item[]> []

  createEffect :void =>
    return unless loading := example()
    fetch `examples/${loading}`
    |> await
    |> .text()
    |> await
    |> loading is example() ? load : =>

  function load(text: string)
    batch =>
      setData parse text
      return unless 'hdims' in data
      id .= 0
      setHDims 
        for title of data.hdims
          {id: ++id, title}
      setVDims
        for title of data.vdims
          {id: ++id, title}
  createEffect =>
    return unless 'dims' in data and (hDims()# or vDims()#)
    setRows makeRows {}
      ...data
      hdims: hDims().map .title
      vdims: vDims().map .title
  createEffect => setHItems hDims()
  createEffect => setVItems vDims()

  <h1>Hyper-Table
    <span .link>
      [<a href="https://github.com/65440-2023/hyper-table">source code</a>]
  <select value=example() onChange=
    (e) =>
      setExample e.currentTarget.value
  >
    <For each=examples>(ex) =>
      <option value=ex.filename>
        {ex.title}
  <input type="file" accept=".tsv" onInput=
    (e) =>
      file := e.currentTarget.files?.[0]
      return unless file?
      reader := new FileReader
      reader.onload = =>
        load reader.result as string
        setExample undefined
      reader.readAsText file
  >
  <div .description
   innerHTML={examples.find(.filename is example())?.description ?? ''}>
  <Show when={hItems()# or vItems()#}>
    <hr>
    <.dimss>
      <label>Horizontal:
      <.dims use:dndzone={items: hItems} on:consider=
        (e) => setHItems e.detail.items
      on:finalize=
        (e) => setHDims e.detail.items
      >
        <For each=hItems()>(dim) =>
          <span .dim>{dim.title}
      <label>Vertical:
      <.dims use:dndzone={items: vItems} on:consider=
        (e) => setVItems e.detail.items
      on:finalize=
        (e) => setVDims e.detail.items
      >
        <For each=vItems()>(dim) =>
          <span .dim>{dim.title}
  <hr>
  <table>
    <For each=rows()>(row) =>
      <tr>
        <For each=row>(rect) =>
          <td rowspan={rect.ve - rect.vs} colspan={rect.he - rect.hs} style=
            'background-color': rect.bg
          >
            >do
              style: Record<string, string> := {}
              html .= rect.value
              .replace /\\texttt{([^}]*)}/g, (_, text) =>
                style['font-family'] = 'monospace'
                text
              .replace /\\textcolor{([^}]*)}{([^}]+)}/g, (_, color, text) =>
                style.color = color
                text
              .replace /\\rotatebox\{90\}{([^}]+)}/g, (_, text) =>
                style.'writing-mode' = 'sideways-lr'
                text
              .replace /&/g, '&amp;'
              .replace /</g, '&lt;'
              .replace />/g, '&gt;'
              .replace /\\([#&])/g, '$1'
              .replace /\$([^$]+)\$/g, (_, math) =>
                renderToString math
              html or= '&nbsp;'
              <span {style} innerHTML=html>
